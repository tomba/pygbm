R"""
Auto-generated by:
ctypesgen -lgbm --no-symbol-guards --no-macro-guards --no-srcinfo -I/usr/include -ogbm/capi/gbm.py -i /usr/include/gbm.h
"""

import ctypes
from ctypes import *


# -- Begin library loader --

import sys
import ctypes
import ctypes.util
import pathlib

def _find_library(name, dirs, search_sys):
    
    if sys.platform.startswith(("win32", "cygwin", "msys")):
        patterns = ["{}.dll", "lib{}.dll", "{}"]
    elif sys.platform.startswith(("darwin", "ios")):
        patterns = ["lib{}.dylib", "{}.dylib", "lib{}.so", "{}.so", "{}"]
    else:  # assume unix pattern or plain name
        patterns = ["lib{}.so", "{}.so", "{}"]
    
    for dir in dirs:
        dir = pathlib.Path(dir)
        if not dir.is_absolute():
            dir = (pathlib.Path(__file__).parent / dir).resolve(strict=False)
        for pat in patterns:
            libpath = dir / pat.format(name)
            if libpath.is_file():
                return str(libpath)
    
    libpath = ctypes.util.find_library(name) if search_sys else None
    if not libpath:
        raise ImportError(f"Could not find library '{name}' (dirs={dirs}, search_sys={search_sys})")
    
    return libpath

_libs_info, _libs = {}, {}

def _register_library(name, dllclass, **kwargs):
    libpath = _find_library(name, **kwargs)
    _libs_info[name] = {**kwargs, "path": libpath}
    _libs[name] = dllclass(libpath)

# -- End library loader --


# -- Begin templates --

# AOTW, ctypes does not support non-primitive result types in callbacks,
# so we remap custom pointer types to unchecked c_void_p.
def UNCHECKED(t):
    if hasattr(t, "_type_") and not isinstance(t._type_, str):
        return ctypes.c_void_p
    else:
        return t

# -- End templates --


# Load library 'gbm'

_register_library(
    name = 'gbm',
    dllclass = ctypes.CDLL,
    dirs = [],
    search_sys = True,
)


# -- Begin header members --

__uint32_t = c_uint

__uint64_t = c_ulong

uint32_t = __uint32_t

uint64_t = __uint64_t

class struct_gbm_device (Structure):
    pass

class struct_gbm_bo (Structure):
    pass

class struct_gbm_surface (Structure):
    pass

class union_gbm_bo_handle (Union):
    __slots__ = ['ptr', 's32', 'u32', 's64', 'u64']

union_gbm_bo_handle._fields_ = [
    ('ptr', POINTER(None)),
    ('s32', c_int32),
    ('u32', uint32_t),
    ('s64', c_int64),
    ('u64', uint64_t),
]

enum_gbm_bo_format = c_int

GBM_BO_FORMAT_XRGB8888 = 0

GBM_BO_FORMAT_ARGB8888 = (GBM_BO_FORMAT_XRGB8888 + 1)

class struct_gbm_format_name_desc (Structure):
    __slots__ = ['name']

struct_gbm_format_name_desc._fields_ = [
    ('name', c_char * int(5)),
]

enum_gbm_bo_flags = c_int

GBM_BO_USE_SCANOUT = (1 << 0)

GBM_BO_USE_CURSOR = (1 << 1)

GBM_BO_USE_CURSOR_64X64 = GBM_BO_USE_CURSOR

GBM_BO_USE_RENDERING = (1 << 2)

GBM_BO_USE_WRITE = (1 << 3)

GBM_BO_USE_LINEAR = (1 << 4)

GBM_BO_USE_PROTECTED = (1 << 5)

GBM_BO_USE_FRONT_RENDERING = (1 << 6)

GBM_BO_FIXED_COMPRESSION_DEFAULT = (1 << 7)

GBM_BO_FIXED_COMPRESSION_1BPC = (2 << 7)

GBM_BO_FIXED_COMPRESSION_2BPC = (3 << 7)

GBM_BO_FIXED_COMPRESSION_3BPC = (4 << 7)

GBM_BO_FIXED_COMPRESSION_4BPC = (5 << 7)

GBM_BO_FIXED_COMPRESSION_5BPC = (6 << 7)

GBM_BO_FIXED_COMPRESSION_6BPC = (7 << 7)

GBM_BO_FIXED_COMPRESSION_7BPC = (8 << 7)

GBM_BO_FIXED_COMPRESSION_8BPC = (9 << 7)

GBM_BO_FIXED_COMPRESSION_9BPC = (10 << 7)

GBM_BO_FIXED_COMPRESSION_10BPC = (11 << 7)

GBM_BO_FIXED_COMPRESSION_11BPC = (12 << 7)

GBM_BO_FIXED_COMPRESSION_12BPC = (13 << 7)

gbm_device_get_fd = _libs['gbm']['gbm_device_get_fd']
gbm_device_get_fd.argtypes = [POINTER(struct_gbm_device)]
gbm_device_get_fd.restype = c_int

gbm_device_get_backend_name = _libs['gbm']['gbm_device_get_backend_name']
gbm_device_get_backend_name.argtypes = [POINTER(struct_gbm_device)]
gbm_device_get_backend_name.restype = POINTER(c_char)

gbm_device_is_format_supported = _libs['gbm']['gbm_device_is_format_supported']
gbm_device_is_format_supported.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t]
gbm_device_is_format_supported.restype = c_int

gbm_device_get_format_modifier_plane_count = _libs['gbm']['gbm_device_get_format_modifier_plane_count']
gbm_device_get_format_modifier_plane_count.argtypes = [POINTER(struct_gbm_device), uint32_t, uint64_t]
gbm_device_get_format_modifier_plane_count.restype = c_int

gbm_device_destroy = _libs['gbm']['gbm_device_destroy']
gbm_device_destroy.argtypes = [POINTER(struct_gbm_device)]
gbm_device_destroy.restype = None

gbm_create_device = _libs['gbm']['gbm_create_device']
gbm_create_device.argtypes = [c_int]
gbm_create_device.restype = POINTER(struct_gbm_device)

gbm_bo_create = _libs['gbm']['gbm_bo_create']
gbm_bo_create.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, uint32_t]
gbm_bo_create.restype = POINTER(struct_gbm_bo)

gbm_bo_create_with_modifiers = _libs['gbm']['gbm_bo_create_with_modifiers']
gbm_bo_create_with_modifiers.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, POINTER(uint64_t), c_uint]
gbm_bo_create_with_modifiers.restype = POINTER(struct_gbm_bo)

gbm_bo_create_with_modifiers2 = _libs['gbm']['gbm_bo_create_with_modifiers2']
gbm_bo_create_with_modifiers2.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, POINTER(uint64_t), c_uint, uint32_t]
gbm_bo_create_with_modifiers2.restype = POINTER(struct_gbm_bo)

class struct_gbm_import_fd_data (Structure):
    __slots__ = ['fd', 'width', 'height', 'stride', 'format']

struct_gbm_import_fd_data._fields_ = [
    ('fd', c_int),
    ('width', uint32_t),
    ('height', uint32_t),
    ('stride', uint32_t),
    ('format', uint32_t),
]

class struct_gbm_import_fd_modifier_data (Structure):
    __slots__ = ['width', 'height', 'format', 'num_fds', 'fds', 'strides', 'offsets', 'modifier']

struct_gbm_import_fd_modifier_data._fields_ = [
    ('width', uint32_t),
    ('height', uint32_t),
    ('format', uint32_t),
    ('num_fds', uint32_t),
    ('fds', c_int * int(4)),
    ('strides', c_int * int(4)),
    ('offsets', c_int * int(4)),
    ('modifier', uint64_t),
]

gbm_bo_import = _libs['gbm']['gbm_bo_import']
gbm_bo_import.argtypes = [POINTER(struct_gbm_device), uint32_t, POINTER(None), uint32_t]
gbm_bo_import.restype = POINTER(struct_gbm_bo)

enum_gbm_bo_transfer_flags = c_int

GBM_BO_TRANSFER_READ = (1 << 0)

GBM_BO_TRANSFER_WRITE = (1 << 1)

GBM_BO_TRANSFER_READ_WRITE = (GBM_BO_TRANSFER_READ | GBM_BO_TRANSFER_WRITE)

gbm_bo_map = _libs['gbm']['gbm_bo_map']
gbm_bo_map.argtypes = [POINTER(struct_gbm_bo), uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, POINTER(uint32_t), POINTER(POINTER(None))]
gbm_bo_map.restype = POINTER(None)

gbm_bo_unmap = _libs['gbm']['gbm_bo_unmap']
gbm_bo_unmap.argtypes = [POINTER(struct_gbm_bo), POINTER(None)]
gbm_bo_unmap.restype = None

gbm_bo_get_width = _libs['gbm']['gbm_bo_get_width']
gbm_bo_get_width.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_width.restype = uint32_t

gbm_bo_get_height = _libs['gbm']['gbm_bo_get_height']
gbm_bo_get_height.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_height.restype = uint32_t

gbm_bo_get_stride = _libs['gbm']['gbm_bo_get_stride']
gbm_bo_get_stride.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_stride.restype = uint32_t

gbm_bo_get_stride_for_plane = _libs['gbm']['gbm_bo_get_stride_for_plane']
gbm_bo_get_stride_for_plane.argtypes = [POINTER(struct_gbm_bo), c_int]
gbm_bo_get_stride_for_plane.restype = uint32_t

gbm_bo_get_format = _libs['gbm']['gbm_bo_get_format']
gbm_bo_get_format.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_format.restype = uint32_t

gbm_bo_get_bpp = _libs['gbm']['gbm_bo_get_bpp']
gbm_bo_get_bpp.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_bpp.restype = uint32_t

gbm_bo_get_offset = _libs['gbm']['gbm_bo_get_offset']
gbm_bo_get_offset.argtypes = [POINTER(struct_gbm_bo), c_int]
gbm_bo_get_offset.restype = uint32_t

gbm_bo_get_device = _libs['gbm']['gbm_bo_get_device']
gbm_bo_get_device.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_device.restype = POINTER(struct_gbm_device)

gbm_bo_get_handle = _libs['gbm']['gbm_bo_get_handle']
gbm_bo_get_handle.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_handle.restype = union_gbm_bo_handle

gbm_bo_get_fd = _libs['gbm']['gbm_bo_get_fd']
gbm_bo_get_fd.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_fd.restype = c_int

gbm_bo_get_modifier = _libs['gbm']['gbm_bo_get_modifier']
gbm_bo_get_modifier.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_modifier.restype = uint64_t

gbm_bo_get_plane_count = _libs['gbm']['gbm_bo_get_plane_count']
gbm_bo_get_plane_count.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_plane_count.restype = c_int

gbm_bo_get_handle_for_plane = _libs['gbm']['gbm_bo_get_handle_for_plane']
gbm_bo_get_handle_for_plane.argtypes = [POINTER(struct_gbm_bo), c_int]
gbm_bo_get_handle_for_plane.restype = union_gbm_bo_handle

gbm_bo_get_fd_for_plane = _libs['gbm']['gbm_bo_get_fd_for_plane']
gbm_bo_get_fd_for_plane.argtypes = [POINTER(struct_gbm_bo), c_int]
gbm_bo_get_fd_for_plane.restype = c_int

gbm_bo_write = _libs['gbm']['gbm_bo_write']
gbm_bo_write.argtypes = [POINTER(struct_gbm_bo), POINTER(None), c_size_t]
gbm_bo_write.restype = c_int

gbm_bo_set_user_data = _libs['gbm']['gbm_bo_set_user_data']
gbm_bo_set_user_data.argtypes = [POINTER(struct_gbm_bo), POINTER(None), CFUNCTYPE(UNCHECKED(None), POINTER(struct_gbm_bo), POINTER(None))]
gbm_bo_set_user_data.restype = None

gbm_bo_get_user_data = _libs['gbm']['gbm_bo_get_user_data']
gbm_bo_get_user_data.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_get_user_data.restype = POINTER(None)

gbm_bo_destroy = _libs['gbm']['gbm_bo_destroy']
gbm_bo_destroy.argtypes = [POINTER(struct_gbm_bo)]
gbm_bo_destroy.restype = None

gbm_surface_create = _libs['gbm']['gbm_surface_create']
gbm_surface_create.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, uint32_t]
gbm_surface_create.restype = POINTER(struct_gbm_surface)

gbm_surface_create_with_modifiers = _libs['gbm']['gbm_surface_create_with_modifiers']
gbm_surface_create_with_modifiers.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, POINTER(uint64_t), c_uint]
gbm_surface_create_with_modifiers.restype = POINTER(struct_gbm_surface)

gbm_surface_create_with_modifiers2 = _libs['gbm']['gbm_surface_create_with_modifiers2']
gbm_surface_create_with_modifiers2.argtypes = [POINTER(struct_gbm_device), uint32_t, uint32_t, uint32_t, POINTER(uint64_t), c_uint, uint32_t]
gbm_surface_create_with_modifiers2.restype = POINTER(struct_gbm_surface)

gbm_surface_lock_front_buffer = _libs['gbm']['gbm_surface_lock_front_buffer']
gbm_surface_lock_front_buffer.argtypes = [POINTER(struct_gbm_surface)]
gbm_surface_lock_front_buffer.restype = POINTER(struct_gbm_bo)

gbm_surface_release_buffer = _libs['gbm']['gbm_surface_release_buffer']
gbm_surface_release_buffer.argtypes = [POINTER(struct_gbm_surface), POINTER(struct_gbm_bo)]
gbm_surface_release_buffer.restype = None

gbm_surface_has_free_buffers = _libs['gbm']['gbm_surface_has_free_buffers']
gbm_surface_has_free_buffers.argtypes = [POINTER(struct_gbm_surface)]
gbm_surface_has_free_buffers.restype = c_int

gbm_surface_destroy = _libs['gbm']['gbm_surface_destroy']
gbm_surface_destroy.argtypes = [POINTER(struct_gbm_surface)]
gbm_surface_destroy.restype = None

gbm_format_get_name = _libs['gbm']['gbm_format_get_name']
gbm_format_get_name.argtypes = [uint32_t, POINTER(struct_gbm_format_name_desc)]
gbm_format_get_name.restype = POINTER(c_char)

__GBM__ = 1

def __gbm_fourcc_code(a, b, c, d):
    return (((uint32_t(ord(a)).value | (uint32_t(ord(b)).value << 8)) | (uint32_t(ord(c)).value << 16)) | (uint32_t(ord(d)).value << 24))

GBM_FORMAT_BIG_ENDIAN = (1 << 31)

GBM_FORMAT_C8 = __gbm_fourcc_code('C', '8', ' ', ' ')

GBM_FORMAT_R8 = __gbm_fourcc_code('R', '8', ' ', ' ')

GBM_FORMAT_R16 = __gbm_fourcc_code('R', '1', '6', ' ')

GBM_FORMAT_GR88 = __gbm_fourcc_code('G', 'R', '8', '8')

GBM_FORMAT_RG1616 = __gbm_fourcc_code('R', 'G', '3', '2')

GBM_FORMAT_GR1616 = __gbm_fourcc_code('G', 'R', '3', '2')

GBM_FORMAT_RGB332 = __gbm_fourcc_code('R', 'G', 'B', '8')

GBM_FORMAT_BGR233 = __gbm_fourcc_code('B', 'G', 'R', '8')

GBM_FORMAT_XRGB4444 = __gbm_fourcc_code('X', 'R', '1', '2')

GBM_FORMAT_XBGR4444 = __gbm_fourcc_code('X', 'B', '1', '2')

GBM_FORMAT_RGBX4444 = __gbm_fourcc_code('R', 'X', '1', '2')

GBM_FORMAT_BGRX4444 = __gbm_fourcc_code('B', 'X', '1', '2')

GBM_FORMAT_ARGB4444 = __gbm_fourcc_code('A', 'R', '1', '2')

GBM_FORMAT_ABGR4444 = __gbm_fourcc_code('A', 'B', '1', '2')

GBM_FORMAT_RGBA4444 = __gbm_fourcc_code('R', 'A', '1', '2')

GBM_FORMAT_BGRA4444 = __gbm_fourcc_code('B', 'A', '1', '2')

GBM_FORMAT_XRGB1555 = __gbm_fourcc_code('X', 'R', '1', '5')

GBM_FORMAT_XBGR1555 = __gbm_fourcc_code('X', 'B', '1', '5')

GBM_FORMAT_RGBX5551 = __gbm_fourcc_code('R', 'X', '1', '5')

GBM_FORMAT_BGRX5551 = __gbm_fourcc_code('B', 'X', '1', '5')

GBM_FORMAT_ARGB1555 = __gbm_fourcc_code('A', 'R', '1', '5')

GBM_FORMAT_ABGR1555 = __gbm_fourcc_code('A', 'B', '1', '5')

GBM_FORMAT_RGBA5551 = __gbm_fourcc_code('R', 'A', '1', '5')

GBM_FORMAT_BGRA5551 = __gbm_fourcc_code('B', 'A', '1', '5')

GBM_FORMAT_RGB565 = __gbm_fourcc_code('R', 'G', '1', '6')

GBM_FORMAT_BGR565 = __gbm_fourcc_code('B', 'G', '1', '6')

GBM_FORMAT_RGB888 = __gbm_fourcc_code('R', 'G', '2', '4')

GBM_FORMAT_BGR888 = __gbm_fourcc_code('B', 'G', '2', '4')

GBM_FORMAT_XRGB8888 = __gbm_fourcc_code('X', 'R', '2', '4')

GBM_FORMAT_XBGR8888 = __gbm_fourcc_code('X', 'B', '2', '4')

GBM_FORMAT_RGBX8888 = __gbm_fourcc_code('R', 'X', '2', '4')

GBM_FORMAT_BGRX8888 = __gbm_fourcc_code('B', 'X', '2', '4')

GBM_FORMAT_ARGB8888 = __gbm_fourcc_code('A', 'R', '2', '4')

GBM_FORMAT_ABGR8888 = __gbm_fourcc_code('A', 'B', '2', '4')

GBM_FORMAT_RGBA8888 = __gbm_fourcc_code('R', 'A', '2', '4')

GBM_FORMAT_BGRA8888 = __gbm_fourcc_code('B', 'A', '2', '4')

GBM_FORMAT_XRGB2101010 = __gbm_fourcc_code('X', 'R', '3', '0')

GBM_FORMAT_XBGR2101010 = __gbm_fourcc_code('X', 'B', '3', '0')

GBM_FORMAT_RGBX1010102 = __gbm_fourcc_code('R', 'X', '3', '0')

GBM_FORMAT_BGRX1010102 = __gbm_fourcc_code('B', 'X', '3', '0')

GBM_FORMAT_ARGB2101010 = __gbm_fourcc_code('A', 'R', '3', '0')

GBM_FORMAT_ABGR2101010 = __gbm_fourcc_code('A', 'B', '3', '0')

GBM_FORMAT_RGBA1010102 = __gbm_fourcc_code('R', 'A', '3', '0')

GBM_FORMAT_BGRA1010102 = __gbm_fourcc_code('B', 'A', '3', '0')

GBM_FORMAT_XBGR16161616 = __gbm_fourcc_code('X', 'B', '4', '8')

GBM_FORMAT_ABGR16161616 = __gbm_fourcc_code('A', 'B', '4', '8')

GBM_FORMAT_XBGR16161616F = __gbm_fourcc_code('X', 'B', '4', 'H')

GBM_FORMAT_ABGR16161616F = __gbm_fourcc_code('A', 'B', '4', 'H')

GBM_FORMAT_YUYV = __gbm_fourcc_code('Y', 'U', 'Y', 'V')

GBM_FORMAT_YVYU = __gbm_fourcc_code('Y', 'V', 'Y', 'U')

GBM_FORMAT_UYVY = __gbm_fourcc_code('U', 'Y', 'V', 'Y')

GBM_FORMAT_VYUY = __gbm_fourcc_code('V', 'Y', 'U', 'Y')

GBM_FORMAT_AYUV = __gbm_fourcc_code('A', 'Y', 'U', 'V')

GBM_FORMAT_NV12 = __gbm_fourcc_code('N', 'V', '1', '2')

GBM_FORMAT_NV21 = __gbm_fourcc_code('N', 'V', '2', '1')

GBM_FORMAT_NV16 = __gbm_fourcc_code('N', 'V', '1', '6')

GBM_FORMAT_NV61 = __gbm_fourcc_code('N', 'V', '6', '1')

GBM_FORMAT_YUV410 = __gbm_fourcc_code('Y', 'U', 'V', '9')

GBM_FORMAT_YVU410 = __gbm_fourcc_code('Y', 'V', 'U', '9')

GBM_FORMAT_YUV411 = __gbm_fourcc_code('Y', 'U', '1', '1')

GBM_FORMAT_YVU411 = __gbm_fourcc_code('Y', 'V', '1', '1')

GBM_FORMAT_YUV420 = __gbm_fourcc_code('Y', 'U', '1', '2')

GBM_FORMAT_YVU420 = __gbm_fourcc_code('Y', 'V', '1', '2')

GBM_FORMAT_YUV422 = __gbm_fourcc_code('Y', 'U', '1', '6')

GBM_FORMAT_YVU422 = __gbm_fourcc_code('Y', 'V', '1', '6')

GBM_FORMAT_YUV444 = __gbm_fourcc_code('Y', 'U', '2', '4')

GBM_FORMAT_YVU444 = __gbm_fourcc_code('Y', 'V', '2', '4')

GBM_BO_FIXED_COMPRESSION_MASK = (((1 << 11) - 1) & (~((1 << 7) - 1)))

GBM_BO_IMPORT_WL_BUFFER = 0x5501

GBM_BO_IMPORT_EGL_IMAGE = 0x5502

GBM_BO_IMPORT_FD = 0x5503

GBM_BO_IMPORT_FD_MODIFIER = 0x5504

GBM_MAX_PLANES = 4

gbm_device = struct_gbm_device

gbm_bo = struct_gbm_bo

gbm_surface = struct_gbm_surface

gbm_bo_handle = union_gbm_bo_handle

gbm_format_name_desc = struct_gbm_format_name_desc

gbm_import_fd_data = struct_gbm_import_fd_data

gbm_import_fd_modifier_data = struct_gbm_import_fd_modifier_data

# -- End header members --
